def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    namespace 'xyz.mcdonald.terrainsummit'
    compileSdk 34
    ndkVersion '25.1.8937393'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }


    defaultConfig {
        applicationId "xyz.mcdonald.terrainsummit"
        minSdkVersion 20
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }
    signingConfigs {
        release {
            keyAlias System.getenv('PLAY_UPLOAD_ALIAS')
            keyPassword System.getenv('PLAY_UPLOAD_PASSWORD')
            storeFile System.getenv('PLAY_UPLOAD_KEYSTORE') ? file(System.getenv('PLAY_UPLOAD_KEYSTORE')) : null
            storePassword System.getenv('PLAY_UPLOAD_PASSWORD')
        }
    }


    buildTypes {
        release {
            if (System.getenv('PLAY_UPLOAD_KEYSTORE') != null &&
                    System.getenv('PLAY_UPLOAD_ALIAS') != null &&
                    System.getenv('PLAY_UPLOAD_PASSWORD') != null) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
            ndk {
                debugSymbolLevel 'FULL'
            }
        }
    }
    lint {
        disable 'InvalidPackage'
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'com.google.android.material:material:1.12.0-rc01'

    def multidex_version = "2.0.1"
    implementation "androidx.multidex:multidex:$multidex_version"
}
